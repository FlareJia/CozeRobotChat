// Generated by gencpp from file music_client/playmusicResponse.msg
// DO NOT EDIT!


#ifndef MUSIC_CLIENT_MESSAGE_PLAYMUSICRESPONSE_H
#define MUSIC_CLIENT_MESSAGE_PLAYMUSICRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace music_client
{
template <class ContainerAllocator>
struct playmusicResponse_
{
  typedef playmusicResponse_<ContainerAllocator> Type;

  playmusicResponse_()
    : success_flag(false)  {
    }
  playmusicResponse_(const ContainerAllocator& _alloc)
    : success_flag(false)  {
  (void)_alloc;
    }



   typedef uint8_t _success_flag_type;
  _success_flag_type success_flag;





  typedef boost::shared_ptr< ::music_client::playmusicResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::music_client::playmusicResponse_<ContainerAllocator> const> ConstPtr;

}; // struct playmusicResponse_

typedef ::music_client::playmusicResponse_<std::allocator<void> > playmusicResponse;

typedef boost::shared_ptr< ::music_client::playmusicResponse > playmusicResponsePtr;
typedef boost::shared_ptr< ::music_client::playmusicResponse const> playmusicResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::music_client::playmusicResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::music_client::playmusicResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::music_client::playmusicResponse_<ContainerAllocator1> & lhs, const ::music_client::playmusicResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success_flag == rhs.success_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::music_client::playmusicResponse_<ContainerAllocator1> & lhs, const ::music_client::playmusicResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace music_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::music_client::playmusicResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::music_client::playmusicResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::music_client::playmusicResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::music_client::playmusicResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::music_client::playmusicResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::music_client::playmusicResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::music_client::playmusicResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51d4deda6e3cbea57b8c79590b6cd9bb";
  }

  static const char* value(const ::music_client::playmusicResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51d4deda6e3cbea5ULL;
  static const uint64_t static_value2 = 0x7b8c79590b6cd9bbULL;
};

template<class ContainerAllocator>
struct DataType< ::music_client::playmusicResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "music_client/playmusicResponse";
  }

  static const char* value(const ::music_client::playmusicResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::music_client::playmusicResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success_flag\n"
"\n"
;
  }

  static const char* value(const ::music_client::playmusicResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::music_client::playmusicResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct playmusicResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::music_client::playmusicResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::music_client::playmusicResponse_<ContainerAllocator>& v)
  {
    s << indent << "success_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUSIC_CLIENT_MESSAGE_PLAYMUSICRESPONSE_H
